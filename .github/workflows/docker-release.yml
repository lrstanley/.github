name: docker-release

on:
  workflow_call:
    secrets:
      SNYK_TOKEN:
        description: "Snyk token for vulnerability scanning."
        required: false
    inputs:
      name:
        description: >
          Name used for the built image (e.g. foo would result in
          ghcr.io/user/foo).
        required: false
        type: string
      dockerfile:
        description: "Alternative dockerfile location."
        required: false
        type: string
        default: Dockerfile
      context:
        description: "Use when you want to change the docker context."
        required: false
        type: string
        default: "."
      push:
        description: "If images should be pushed (not just built and scanned)."
        required: false
        type: boolean
        default: true
      scan:
        description: "If images should be security/quality/etc scanned."
        required: false
        type: boolean
        default: true

jobs:
  docker-release:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      checks: write
      contents: read
      security-events: write
      statuses: write
    steps:
      - uses: actions/checkout@v3
      - run: git fetch --force --tags
      - name: get-latest-tag
        id: get-latest-tag
        run: |
          LATEST=$(git tag --sort=-v:refname | egrep "^v?[0-9]+\.[0-9]+\.[0-9]+$" | head -1)
          echo "version=${LATEST}" >> "$GITHUB_OUTPUT"
      - name: docker-buildx-setup
        uses: docker/setup-buildx-action@4b4e9c3e2d4531116a6f8ba8e71fc6e2cb6e6c8c
      - name: docker-login
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: fetch-metadata
        id: meta
        uses: docker/metadata-action@c4ee3adeed93b1fa6a762f209fb01608c1a22f1e
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ inputs.name || github.event.repository.name }}
          flavor: |
            latest=false
          tags: |
            type=raw,priority=1000,value=latest,enable=${{ github.ref_name == steps.get-latest-tag.outputs.version || !steps.get-latest-tag.outputs.version }}
            type=semver,pattern={{version}}
            type=semver,priority=600,pattern={{major}},enable=${{ github.ref_name == steps.get-latest-tag.outputs.version || !steps.get-latest-tag.outputs.version }}
            type=semver,priority=500,pattern={{major}}.{{minor}}
            type=semver,priority=800,pattern={{major}}.{{minor}}.{{patch}}
            type=semver,priority=700,pattern={{major}}.{{minor}}.{{patch}},suffix=-{{date 'YYYYMMDD'}}-{{sha}},enable=${{ github.ref_name == steps.get-latest-tag.outputs.version || !steps.get-latest-tag.outputs.version }}
            type=ref,priority=900,event=branch
            type=ref,event=pr
          labels: |
            org.opencontainers.image.license=MIT
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.authors=${{ github.event.repository.owner.name }} <${{ github.event.repository.owner.email || 'unknown' }}>
            org.opencontainers.image.name=${{ inputs.name || github.event.repository.name }}
      - name: docker-build
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: ${{ inputs.context }}
          load: true
          tags: tmp
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: scan-snyk-docker
        if: inputs.scan
        continue-on-error: false
        uses: snyk/actions/docker@7fad562681122205233d1242c3bb39598c5393da
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: tmp
          args: --file=${{ inputs.dockerfile }}
      - name: Upload result to GitHub Code Scanning
        if: inputs.scan
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
          wait-for-processing: true
      - name: docker-tag-and-push
        if: inputs.push
        run: |
          echo -e "${{ steps.meta.outputs.tags }}" | while read -r tag;do
            (
              set -x
              docker tag tmp "$tag"
              docker push "$tag"
            )
          done
