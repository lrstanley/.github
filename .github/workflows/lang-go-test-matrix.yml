name: go-test-matrix

# logic:
#   given: 1.2.3, 1.2.4, 1.2.5, 1.3.0, 1.3.1, 1.3.2, 1.3.3
#
#   minor: 1, patch: 1, returns: 1.3.3
#   minor: 2, patch: 1, returns: 1.3.3, 1.2.5
#   minor: 1, patch: 2, returns: 1.3.2, 1.3.3
#   minor: 2, patch: 2, returns: 1.3.3, 1.3.2, 1.2.5, 1.2.4

on:
  workflow_call:
    inputs:
      num-minor:
        description: "Number of minor semver versions of Go to use"
        required: false
        type: number
        default: 2
      num-patch:
        description: "Number of patch semver versions of Go to use"
        required: false
        type: number
        default: 1
      go-version:
        description: >
          Go version if only a specific version is desired (overrides
          minor/patch).
        required: false
        type: string
      run:
        description: >
          Alternative command to run, instead of the builtin testing
          command.
        required: False
        type: string

jobs:
  go-versions:
    runs-on: ubuntu-latest
    permissions: {}
    outputs:
      versions: ${{ steps.fetch-versions.outputs.versions }}
    steps:
      - name: git-clone-tools-repo
        uses: actions/checkout@v3
        with:
          repository: lrstanley/.github
          path: ghmeta
      - id: fetch-versions
        run: ./ghmeta/scripts/versions-go.sh ${{ inputs.go-version || 'many' }}
        env:
          NUM_MINOR: ${{ inputs.num-minor }}
          NUM_PATCH: ${{ inputs.num-patch }}
  go-test-matrix:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [go-versions]
    strategy:
      fail-fast: false
      matrix:
        go-version: ${{ fromJSON(needs.go-versions.outputs.versions) }}
    steps:
      - uses: actions/setup-go@v3
        with: { go-version: "${{ matrix.go-version }}" }
      - uses: actions/checkout@v3
      - name: custom-go-test
        if: inputs.run
        run: ${{ inputs.run }}
      - name: standard-go-test
        if: ${{ !inputs.run }}
        run: |
          if [ -f "Makefile" ] && grep -q "^test-go:" Makefile; then
            make test-go
          elif [ -f "Makefile" ] && grep -q "^test:" Makefile; then
            make test
          else
            GORACE="exitcode=1 halt_on_error=1" go test -v -race -timeout 3m -count 3 -cpu 1,4 ./...
          fi
