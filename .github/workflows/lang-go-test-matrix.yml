name: go-test-matrix

# logic:
#   given: 1.2.3, 1.2.4, 1.2.5, 1.3.0, 1.3.1, 1.3.2, 1.3.3
#
#   minor: 1, patch: 1, returns: 1.3.3
#   minor: 2, patch: 1, returns: 1.3.3, 1.2.5
#   minor: 1, patch: 2, returns: 1.3.2, 1.3.3
#   minor: 2, patch: 2, returns: 1.3.3, 1.3.2, 1.2.5, 1.2.4

on:
  workflow_call:
    inputs:
      go-version:
        description: >
          Go version if only a specific version is desired (overrides
          minor/patch).
        required: false
        type: string
      node-version:
        description: >
          Node version (e.g. to build frontends).
        required: false
        type: string
      num-minor:
        description: "Number of minor semver versions of Go to use"
        required: false
        type: number
        default: 2
      num-patch:
        description: "Number of patch semver versions of Go to use"
        required: false
        type: number
        default: 1
      run:
        description: >
          Alternative command to run, instead of the builtin testing
          command.
        required: False
        type: string
      working-directory:
        description: >
          Working directory to run the test in.
        required: False
        type: string
        default: .

jobs:
  go-versions:
    runs-on: ubuntu-latest
    permissions: {}
    outputs:
      versions: ${{ steps.fetch-versions.outputs.versions }}
    steps:
      - uses: lrstanley/.github/composite/go-versions@master
        id: fetch-versions
        with:
          version: ${{ inputs.go-version || 'many' }}
          num-minor: ${{ inputs.num-minor }}
          num-patch: ${{ inputs.num-patch }}
  go-test-matrix:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [go-versions]
    strategy:
      fail-fast: false
      matrix:
        go-version: ${{ fromJSON(needs.go-versions.outputs.versions) }}
    steps:
      - uses: actions/checkout@v5
      - name: git-clone-tools-repo
        uses: actions/checkout@v5
        with:
          repository: lrstanley/.github
          path: ghmeta
      - uses: lrstanley/.github/composite/setup-go@master
        with:
          version: ${{ matrix.go-version }}
      - name: install-node
        if: inputs.node-version
        uses: actions/setup-node@v5
        with:
          node-version: ${{ inputs.node-version }}
      - name: check if pnpm is used
        id: uses-pnpm
        run: echo "uses-pnpm=$(find . -mindepth 1 -maxdepth 6 -type f -name pnpm-lock.yaml | grep -q . && echo true || echo false)" >> "$GITHUB_OUTPUT"
      - name: pnpm install
        if: steps.uses-pnpm.outputs.uses-pnpm == 'true'
        uses: pnpm/action-setup@v4.1.0
        id: pnpm-install
        with:
          version: latest
          run_install: false
      - name: custom-go-test
        if: inputs.run
        working-directory: ${{ inputs.working-directory }}
        run: ${{ inputs.run }}
      - uses: lrstanley/.github/composite/invoke-task@master
        if: ${{ !inputs.run }}
        with:
          task: go-prepare,prepare
          allow-undefined: true
          working-directory: ${{ inputs.working-directory }}
      - uses: lrstanley/.github/composite/invoke-task@master
        if: ${{ !inputs.run }}
        with:
          task: go-test,test
          working-directory: ${{ inputs.working-directory }}
          fallback: |
            GORACE="exitcode=1 halt_on_error=1" go test -v -race -timeout 3m -count 3 -cpu 1,4 ./...
