# USAGE:
#   jobs:
#     go-lint:
#       needs: [go-version]
#       uses: lrstanley/.github/.github/workflows/lang-go-lint.yml@master
#       with:
#         go-version: 1.2.3 # or don't provide to use latest Go version.

name: go-lint

on:
  workflow_call:
    secrets:
      SNYK_TOKEN:
        description: "Snyk token for vulnerability scanning."
        required: false
    inputs:
      go-version:
        description: >
          Go version to use for linting -- defaults to the latest stable Go
          version.
        required: false
        type: string
      codecov:
        description: >
          Enables Codecov integration (requires running tests at least once).
        default: True
        required: False
        type: boolean
      scan:
        description: >
          If code vulnerability scanning should be enabled.
        default: True
        required: False
        type: boolean

jobs:
  go-version:
    runs-on: ubuntu-latest
    permissions: {}
    outputs:
      version: ${{ steps.fetch-versions.outputs.version }}
    steps:
      - name: git-clone-tools-repo
        uses: actions/checkout@v3
        with:
          repository: lrstanley/.github
      - id: fetch-versions
        run: ./scripts/versions-go.sh ${{ inputs.go-version || 'latest' }}

  codecov:
    needs: [go-version]
    if: inputs.codecov
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
    steps:
      - uses: actions/checkout@v3
      - name: git-clone-tools-repo
        uses: actions/checkout@v3
        with:
          repository: lrstanley/.github
          path: ghmeta
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ needs.go-version.outputs.version }}-codecov-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ needs.go-version.outputs.version }}-
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ needs.go-version.outputs.version }}
      - run: |
          ./ghmeta/scripts/install-codecov.sh
          ./ghmeta/scripts/make.sh go-prepare prepare || /bin/true

          go test -v -coverprofile=coverage.txt -timeout 3m ./...
          codecov -f coverage.txt
  golangci-lint:
    needs: [go-version]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    steps:
      - uses: actions/checkout@v3
      - name: git-clone-tools-repo
        uses: actions/checkout@v3
        with:
          repository: lrstanley/.github
          path: ghmeta
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/.cache/golangci-lint
          key: ${{ runner.os }}-go-${{ needs.go-version.outputs.version }}-golangcilint-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ needs.go-version.outputs.version }}-
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ needs.go-version.outputs.version }}
      - name: parse-results
        run: |
          set -ex

          ./ghmeta/scripts/make.sh go-prepare || /bin/true

          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.52.2

          golangci-lint run --new-from-rev "$GITHUB_SHA" --out-format github-actions,json:results.json --issues-exit-code 0

          ERRORS=$(jq -cr '([.Issues[].Severity | select(. | IN("failure", "error", "fail"))] | length) // 0' results.json)

          if [ "$ERRORS" -gt 0 ];then
            echo "at least one failure from golangci-lint detected"
            exit 1
          else
            exit 0
          fi
  make:
    needs: [go-version]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v3
      - name: git-clone-tools-repo
        uses: actions/checkout@v3
        with:
          repository: lrstanley/.github
          path: ghmeta
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ needs.go-version.outputs.version }}
      - run: |
          ./ghmeta/scripts/make.sh go-prepare || /bin/true
          ./ghmeta/scripts/make.sh go-lint || /bin/true
  snyk:
    needs: [go-version]
    if: ${{ inputs.scan }}
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
      security-events: write
      statuses: write
    steps:
      - uses: actions/checkout@v3
      - name: git-clone-tools-repo
        uses: actions/checkout@v3
        with:
          repository: lrstanley/.github
          path: ghmeta
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ needs.go-version.outputs.version }}
      - uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb
      - name: scan-snyk
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          ./ghmeta/scripts/make.sh go-prepare || /bin/true

          set -x
          mkdir -vp /tmp/sarif

          find "$PWD" -maxdepth 4 -type f -name "go.mod" -printf '%h\n' | while read -r dir; do
              cd "$dir" || exit
              ts=$(date +%s)
              snyk test \
                  --prune-repeated-subdependencies \
                  --severity-threshold=medium \
                  --sarif-file-output="/tmp/sarif/go-$(date +%s).sarif" \
                  "$dir"
          done
      - name: scan-snyk-upload-sarif
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: /tmp/sarif/
